
  -r RED, -b BLUE [Default: baselineTeam]
  --redOpts=REDOPTS, --blueOpts=BLUEOPTS     agent in team (e.g. first=keys) [Default: ]
     
  --keys0,1,2,3               Make agent 0 (first red player) a keyboard agent
  
  -l LAYOUT_FILE
  -t, --textgraphics    Display output as text only
  -q, --quiet           Display minimal output and no graphics
  -Q, --super-quiet     Same as -q but agent output is also suppressed
  -i time 			    TIME limit of a game in moves [Default: 1200]
  -n NUMGAMES           Number of games to play [Default: 1]
  -f, --fixRandomSeed   Fixes the random seed to always play the same game
  --record              Writes game histories to a file (named by the time
                        they were played)
  --replay=REPLAY       Replays a recorded game file.


-----------------overall structure-------------------------
Each strategy (next section) will give a value
Use GA on every weight of strategy, each individual is a list 
of weight. 


-----------------self defined strategy---------------------
time

for attack:
	to food distance 

pacman_run_home
pacman_defend
pacman_attack
ghost_attack
ghost_defense
ghost_escape

-----------------strategy--------------------------------

full defend when time isn't enough
run home if time isn't enough or being chased
cooperate between two agent


--------------------difference with original pacman------
need to control ghost
control two agent -> can cooperate
run home
map => get stuck more easily 
rule difference -> run home after getting dots, 


--------------------------------------
Rules of Pacman Capture the Flag
Layout

The Pacman map is now divided into two halves: blue (right) and red (left). Red agents (which all have even indices) must defend the red food while trying to eat the blue food. When on the red side, a red agent is a ghost. When crossing into enemy territory, the agent becomes a Pacman.
Scoring

As a Pacman eats food dots, those food dots are stored up inside of that Pacman and removed from the board. When a Pacman returns to his side of the board, he deposits the food dots he is carrying, earning one point per food pellet delivered. Red team scores are positive, while Blue team scores are negative.

If Pacman is eaten by a ghost before reaching his own side of the board, he will explode into a cloud of food dots that will be deposited back onto the board.
Eating Pacman

When a Pacman is eaten by an opposing ghost, the Pacman returns to its starting position as a ghost. No points are awarded for eating an opponent.
Power Capsules

If Pacman eats a power capsule, agents on the opposing team become "scared" for the next 40 moves, or until they are eaten and respawn, whichever comes sooner. Agents that are "scared" are susceptible while in the form of ghosts (i.e. while on their own team's side) to being eaten by Pacman. Specifically, if Pacman collides with a "scared" ghost, Pacman is unaffected and the ghost respawns at its starting position (no longer in the "scared" state).
Observations

Agents can only observe an opponent's configuration (position and direction) if they or their teammate is within 5 squares (Manhattan distance). In addition, an agent always gets a noisy distance reading for each agent on the board, which can be used to approximately locate unobserved opponents.

Winning
A game ends when one team returns all but two of the opponents' dots. Games are also limited to 1200 agent moves (300 moves per each of the four agents), not moving is also counted as one move. 
If this move limit is reached, whichever team has returned the most food wins. 
If the score is zero (i.e., tied) this is recorded as a tie game.


Computation Time

Each agent has 1 second to return each action. Each move which does not return within one second will incur a warning. After three warnings, or any single move taking more than 3 seconds, the game is forfeit. There will be an initial start-up allowance of 15 seconds (use the registerInitialState function). If your agent times out or otherwise throws an exception, an error message will be present in the log files, which you can download from the results page. 



for thesis:
    the fundamental problems you are trying to solve
    how you modeled these problems
    your representations of the problems
    the computational strategy used to solve each problem
    algorithmic choices you made in your implementation
    any obstacles you encountered while solving the problem
    evaluation of your agent
    lessons learned during the project 

Algorithm to keep track of opponents
Rike:  communication between agents 



